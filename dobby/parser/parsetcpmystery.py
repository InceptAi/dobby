"""Base class for parsing summaries generated by click.
"""
from __future__ import division
import copy
import dobby.nwmodel.endpoint as endpoint
import dobby.nwmodel.edge as edge
import dobby.nwmodel.node as node
import dobby.nwmodel.flow as flow
import dobby.nwmodel.ipinfo as ipinfo
import dobby.nwmetrics.metrics as metrics
import dobby.utils.util as util

__author__ = """\n""".join(['Vivek Shrivastava (vivek@obiai.tech)'])

class ParseTCPMysterySummary(object):
    """Parses TCP mystery summary generated by click element TCPMystery
    """
    def parse_summary(self, tcpmystery_json, network_summary=None):
        # Create an empty summary if none was provided
        if not network_summary:
            network_summary = NetworkSummary()
        else:
            network_summary = copy.copy(network_summary)
        # First parse tcpmystery
        for flow in tcpmystery_json['trace']['flow']:
            tcp_flow_info = {}
            tcp_metrics_parameters = {}
            tcp_metrics_directional_parameters_0 = {}
            tcp_metrics_directional_parameters_1 = {}

            src_ip = ipinfo.IPInfo(ipv4address=flow['@src'])
            src_ip_endpoint = network_summary.ip_to_endpoints.get(str(src_ip.ipv4address), None)
            if not src_ip_endpoint:
                src_ip_endpoint = endpoint.EndPoint(ip_info=src_ip)
            if not src_ip_endpoint.node_id:
                src_ip_node = node.Node(endpoints=[src_ip_endpoint], node_type=node.NodeType.UNKNOWN)
                src_ip_endpoint.node_id = src_ip_node.node_id
                network_summary.nodes[src_ip_node.node_id] = src_ip_node
            else:
                src_ip_node = network_summary.nodes[src_ip_endpoint.node_id]
            network_summary.ip_to_endpoints[str(src_ip.ipv4address)] = src_ip_endpoint

            dst_ip = ipinfo.IPInfo(ipv4address=flow['@dst'])
            dst_ip_endpoint = network_summary.ip_to_endpoints.get(str(dst_ip.ipv4address), None)
            if not dst_ip_endpoint:
                dst_ip_endpoint = endpoint.EndPoint(ip_info=dst_ip)
            if not dst_ip_endpoint.node_id:
                dst_ip_node = node.Node(endpoints=[dst_ip_endpoint], node_type=node.NodeType.UNKNOWN)
                dst_ip_endpoint.node_id = dst_ip_node.node_id
                network_summary.nodes[dst_ip_node.node_id] = dst_ip_node
            else:
                dst_ip_node = network_summary.nodes[dst_ip_endpoint.node_id]
            network_summary.ip_to_endpoints[str(dst_ip.ipv4address)] = dst_ip_endpoint

            sport = util.get_float_value(flow, '@sport')
            dport = util.get_float_value(flow, '@dport')
            begin = util.get_float_value(flow, '@begin')
            duration = util.get_float_value(flow, '@duration')
            flow_key = str(src_ip.ipv4address) + "-" + str(int(sport)) + "-" +\
                       str(dst_ip.ipv4address) + "-" + str(int(dport))
            # Generate the metrics for RTT/Semirtt/Loss
            rtt_stats = metrics.Stats.from_rtt_json(flow.get('rtt', None))
            tcp_metrics_parameters = dict(start_ts=begin,
                                          end_ts=(begin + duration),
                                          rtt_stats=rtt_stats,
                                          duration=duration)
            tcp_flow_info.update(src_endpoint=src_ip_endpoint,
                                 dst_endpoint=dst_ip_endpoint,
                                 sport=sport,
                                 dport=dport)

            # Generate the metrics for each direction
            for stream in flow['stream']:
                mtu = util.get_float_value(stream, '@mtu')
                nack = util.get_float_value(stream,'@nack')
                ndata = util.get_float_value(stream, '@ndata')
                nbytes = util.get_float_value(stream, '@seqlen')
                rtt_stats = metrics.Stats.from_rtt_json(stream.get('semirtt', None))
                tcp_metrics_directional_parameters = dict(start_ts=begin, end_ts=(begin + duration),
                                                     rtt_stats=rtt_stats, mtu=mtu,
                                                     total_acks=nack,
                                                     total_pkts=ndata,
                                                     total_bytes=nbytes)
                if int(stream['@dir']) == 0:
                    tcp_metrics_directional_parameters_0 = tcp_metrics_directional_parameters
                else:
                    tcp_metrics_directional_parameters_1 = tcp_metrics_directional_parameters

            #Get the tcp flow and insert it into the network_summary.ip_flows dict
            tcp_flow = network_summary.ip_flows.get(flow_key, None)
            if not tcp_flow:
                tcp_flow = flow.TCPFlow(**tcp_flow_info)
                network_summary.ip_flows[flow_key] = tcp_flow
            #Update the metrics
            tcp_flow.update_flow_metrics(**tcp_metrics_parameters)
            tcp_flow.update_flow_metrics_src_to_dst(**tcp_metrics_directional_parameters_0)
            tcp_flow.update_flow_metrics_dst_to_src(**tcp_metrics_directional_parameters_1)

        return network_summary
