"""Base class for parsing summaries generated by click.
"""
import json
import copy
from collections import deque
import dobby.nwinfo.networksummary as NetworkSummary
import dobby.parser.wirelessparser as WirelessParser
import dobby.parser.tcpmysteryparser as TCPMysteryParser
import dobby.parser.tcplossparser as TCPLossParser
import dobby.parser.nodesummaryparser as NodeSummaryParser
import dobby.utils.util as util

__author__ = """\n""".join(['Vivek Shrivastava (vivek@obiai.tech)'])

class ParseManager(object):
    """Parsing manager which coordinates all the parsing
    """
    def __init__(self, max_summaries=None):
        self.summary_queue = deque([], None)
        self.wireless_parser = WirelessParser()
        self.tcpmystery_parser = TCPMysteryParser()
        self.tcploss_parser = TCPLossParser()
        self.nodesummary_parser = NodeSummaryParser()

    def find_summary(self, ts):
        for summary in list(reversed(self.summary_queue)):
            #TODO -- handle summary.start_ts/end_ts being none
            if (ts >= summary.start_ts and ts < summary.end_ts):
                return summary
        return None


    def parse_summary(self, start_ts, end_ts=None,
                      wireless_summary=None, node_summary=None,
                      tcploss_summary=None, tcpmystery_summary=None):
        network_summary = NetworkSummary()
        wireless_json = util.read_json(wireless_summary) if wireless_summary else None
        if wireless_json:
            network_summary = self.wireless_parser.parse_summary(wireless_json=wireless_json,
                                                                 network_summary=network_summary)

        tcpmystery_json = util.read_json(tcpmystery_summary) if tcpmystery_summary else None
        if tcpmystery_json:
            network_summary = self.tcpmystery_parser.parse_summary(tcpmystery_json=tcpmystery_json,
                                                                   network_summary=network_summary)

        tcploss_json = util.read_json(tcploss_summary) if tcploss_summary else None
        if tcploss_json:
            network_summary = self.tcploss_parser.parse_summary(tcploss_json=tcploss_json,
                                                                network_summary=network_summary)

        node_json = util.read_json(node_summary) if node_summary else None
        if node_json:
            network_summary = self.nodesummary_parser.parse_summary(node_json=tcploss_json,
                                                                    network_summary=network_summary)

        self.summary_queue.append(network_summary)


    def main():
        parse_manager = ParseManager()

    if __name__ == '__main__':
        main()
