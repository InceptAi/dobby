"""Base class for parsing summaries generated by click.
"""
from __future__ import division
import copy
import dobby.nwmodel.endpoint as endpointmodel
import dobby.nwmodel.node as nodemodel
import dobby.nwmodel.flow as flowmodel
import dobby.nwmodel.ipinfo as ipinfo
import dobby.nwmetrics.metrics as metrics
import dobby.utils.util as util

__author__ = """\n""".join(['Vivek Shrivastava (vivek@obiai.tech)'])

class ParseTCPLossSummary(object):
    """Parses tcploss summary generated by CalculateTCPLoss click element
    """
    def parse_summary(self, tcploss_json, network_summary=None):
        # Create an empty summary if none was provided
        if not network_summary:
            network_summary = NetworkSummary()
        else:
            network_summary = copy.copy(network_summary)
        # Parse tcploss.json
        for flow in tcploss_json['trace']['flow']:
            tcp_flow_info = {}
            src_ip = ipinfo.IPInfo(ipv4address=flow['@src'])
            src_ip_endpoint = network_summary.ip_to_endpoints.get(str(src_ip.ipv4address), None)
            if not src_ip_endpoint:
                src_ip_endpoint = endpointmodel.EndPoint(ip_info=src_ip)
            if not src_ip_endpoint.node_id:
                src_ip_node = nodemodel.Node(endpoints=[src_ip_endpoint], node_type=nodemodel.NodeType.UNKNOWN)
                src_ip_endpoint.node_id = src_ip_node.node_id
                network_summary.nodes[src_ip_node.node_id] = src_ip_node
            else:
                src_ip_node = network_summary.nodes[src_ip_endpoint.node_id]
            network_summary.ip_to_endpoints[str(src_ip.ipv4address)] = src_ip_endpoint

            dst_ip = ipinfo.IPInfo(ipv4address=flow['@dst'])
            dst_ip_endpoint = network_summary.ip_to_endpoints.get(str(dst_ip.ipv4address), None)
            if not dst_ip_endpoint:
                dst_ip_endpoint = endpointmodel.EndPoint(ip_info=dst_ip)
            if not dst_ip_endpoint.node_id:
                dst_ip_node = nodemodel.Node(endpoints=[dst_ip_endpoint], node_type=nodemodel.NodeType.UNKNOWN)
                dst_ip_endpoint.node_id = dst_ip_node.node_id
                network_summary.nodes[dst_ip_node.node_id] = dst_ip_node
            else:
                dst_ip_node = network_summary.nodes[dst_ip_endpoint.node_id]
            network_summary.ip_to_endpoints[str(dst_ip.ipv4address)] = dst_ip_endpoint

            sport = util.get_float_value(flow, '@sport')
            dport = util.get_float_value(flow, '@dport')
            begin = util.get_float_value(flow, '@begin')
            duration = util.get_float_value(flow, '@duration')
            flow_key = str(src_ip.ipv4address) + "-" + str(int(sport)) + "-" +\
                       str(dst_ip.ipv4address) + "-" + str(int(dport))

            tcp_flow_info.update(src_endpoint=src_ip_endpoint,
                                 dst_endpoint=dst_ip_endpoint,
                                 sport=sport,
                                 dport=dport)
            # Generate the metrics for each direction
            total_losses_both_dir = 0.0
            total_losses_dir_0 = 0.0
            total_losses_dir_1 = 0.0
            for stream in flow['stream']:
                mtu = util.get_float_value(stream, '@mtu')
                nack = util.get_float_value(stream, '@nack')
                data = util.get_float_value(stream, '@ndata')
                nbytes = util.get_float_value(stream, '@seqlen')
                nfloss = util.get_float_value(stream, '@nfloss')
                nloss = util.get_float_value(stream, '@nloss')
                total_loss = nfloss + nloss
                total_losses_both_dir += total_loss
                if int(stream['@dir']) == 0:
                    total_losses_dir_0 = total_loss
                else:
                    total_losses_dir_1 = total_loss

            #Get the tcp flow and insert it into the IP_FLOWS dict
            tcp_flow = network_summary.ip_flows.get(flow_key, None)
            if not tcp_flow:
                tcp_flow = flowmodel.TCPFlow(**tcp_flow_info)
                network_summary.ip_flows[flow_key] = tcp_flow
            tcp_flow.flow_metrics.update_stats(**dict(total_loss=total_losses_both_dir))
            tcp_flow.flow_metrics_src_to_dst.update_stats(**dict(total_loss=total_losses_dir_0))
            tcp_flow.flow_metrics_dst_to_src.update_stats(**dict(total_loss=total_losses_dir_1))
            #End of parsing TCP. Maybe print some stats.
        return network_summary
