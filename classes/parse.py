"""Base class for parsing summaries generated by click.
"""
from __future__ import division
from copy import deepcopy
from collections import Counter
from enum import Enum, unique
from classes.endpoint import EndPoint
from classes.edge import Edge
from classes.node import Node
from classes.flow import Flow
from classes.app import NetworkApp
from classes.phymodel import PhyAddress, PhyModel, WifiPhysicalModel
import json

__author__ = """\n""".join(['Vivek Shrivastava (vivek@obiai.tech)'])

ENDPOINTS = {}
NODES = {}
EDGES = {}
FLOWS = {}
PHYMODEL = {}
APPS = {}


class ParseWirelessSummary(object):
    """Parses wireless summary generated by click
    """
    def __init__(self, fname=None)
        with open(fname) as f:
            content = f.readlines()
        # Each line should be a json wireless summary
        for summary in content:
            wireless_json = json.loads(summary)
        #Iterate and update the endpoint stats
        for link in wireless_json['links']['link']:
            ap = link['@ap']
            client = link['@client']
            bssid = link['@bssid']
            # Create an endpoint for ap/client
            # Create a phyModel for bssid
            ENDPOINTS[
            for stream in link['stream']:
                direction = stream['@dir']
                avg_signal = stream['@avg_signal']
                avg_noise = stream['@avg_noise']
                rate = stream['@rate']
                size = stream['@size']
                snr = stream['@snr']
                total_data_bytes = stream['@total_data_bytes']
                total_data_pkts = stream['@total_data_pkts']
                total_pkts = stream['@total_pkts']
                total_retx = stream['@total_retx']
                total_trans_time_usec = stream['@total_trans_time_usec']
                





class ParseNodeSummary(object):
    def __init__(self, 
class ParseTCPSummary(object):
    """
    Base class for a Flow.

    Flow {
        Vector edgeList[MAX_HOPS] // An ordered list of edges
        FlowType flowType[MAX_PROTOCOL_LAYERS] // A list of protocols like HTTP/TCP/IP
        Int Port
        FlowMetrics flowMetrics  // Captures network metrics for this flow.
    } 

    """
    def __init__(self, edge_list=[], flow_type=FlowType.UNKNOWN, port=0, **metrics)
        self.edge_list = edge_list
        self.flow_type = flow_type
        self.port = port
        self.flow_metrics = Counter()
        self.flow_metrics.update(metrics)

    def update_metrics(self, metrics):
        self.flow_metrics.update(metrics)
